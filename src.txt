# !/usr/bin/env python3
# Generated by Proteus Visual Designer for Raspberry Pi

# Modules
from goto import with_goto
from stddef import *
import var
import pio
import resource
from datetime import datetime
import RPi.GPIO as GPIO
import time

# Peripheral Configuration Code (Do Not Edit)
#---CONFIG_BEGIN---
import cpu
import FileStore
import VFP

# Motor Speed control pin
SP_PIN_1 = 18  # PWM pin
# SP_PIN_2 

# Top back motors
TB_PIN_1 = 23  # IN1 pin on the motor driver
TB_PIN_2 = 24  # IN2 pin on the motor driver

# Top Front motor
TF_PIN_1 = 25
TF_PIN_2 = 27 

# Back Motor
B_PIN_1 = 20
B_PIN_2 = 21

# CONTROL PINS
IN7 = 4 # Start motors
BUTTON_DIRECTION = 22  # Change direction

# GPIO mode setup
GPIO.setmode(GPIO.BCM)
GPIO.setup(S, GPIO.OUT)
GPIO.setup(IN1, GPIO.OUT)
GPIO.setup(IN2, GPIO.OUT)

GPIO.setup(IN3, GPIO.OUT)
GPIO.setup(IN4, GPIO.OUT)

GPIO.setup(IN5, GPIO.OUT)
GPIO.setup(IN6, GPIO.OUT)
GPIO.setup(IN7, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)  # Setup button pin with pull-down resistor
GPIO.setup(BUTTON_DIRECTION, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

# Set IN1 and IN2 to high and low to control motor direction
GPIO.output(IN1, GPIO.HIGH)
GPIO.output(IN2, GPIO.LOW)

GPIO.output(IN3, GPIO.HIGH)
GPIO.output(IN4, GPIO.LOW)

GPIO.output(IN6, GPIO.HIGH)
GPIO.output(IN5, GPIO.LOW)

# Initialize PWM on the ENA pin at 1000Hz
pwm = GPIO.PWM(ENA, 1000)
pwm.start(0)  # Start PWM with 0% duty cycle

# Flag to keep state of motors
TOP_MOTOR_FLAG = False
BOTTOM_MOTOR_FLAG = False
MOTOR_DIRECTION = True  # True for one direction, False for the other

# Function to start the motor
def start_motor():
    try:
        for speed in range(0, 101, 5):  # Increase speed from 0 to 100
            pwm.ChangeDutyCycle(speed)
            print(f"Motor Speed: {speed}%")
        time.sleep(0.1)
    except KeyboardInterrupt:
        pass

# Function to stop the motor
def stop_motor():
    try:
        for speed in range(100, -1, -5):# Decrease speedfrom100to 0
            pwm.ChangeDutyCycle(speed)
            print(f"Motor Speed: {speed}%")
        time.sleep(0.1)
    except KeyboardInterrupt:
        pass

# Function to toggle the motor state
def toggle_motor():
    global TOP_MOTOR_FLAG
    if TOP_MOTOR_FLAG:
        stop_motor()
    else:
        start_motor()
    TOP_MOTOR_FLAG = not TOP_MOTOR_FLAG
    
# Function to change the motor direction
def change_direction():
    global MOTOR_DIRECTION
    MOTOR_DIRECTION = not MOTOR_DIRECTION
    if MOTOR_DIRECTION:
        GPIO.output(IN1, GPIO.HIGH)
        GPIO.output(IN2, GPIO.LOW)
        
        GPIO.output(IN3, GPIO.HIGH)
        GPIO.output(IN4, GPIO.LOW)
        
        GPIO.output(IN6, GPIO.HIGH)
        GPIO.output(IN5, GPIO.LOW)
        print("Motor direction: Forward")
    else:
        GPIO.output(IN1, GPIO.LOW)
        GPIO.output(IN2, GPIO.HIGH)
        
        GPIO.output(IN3, GPIO.LOW)
        GPIO.output(IN4, GPIO.HIGH)
        
        GPIO.output(IN6, GPIO.LOW)
        GPIO.output(IN5, GPIO.HIGH)
        print("Motor direction: Reverse")

	
# Add event detection for the button
GPIO.add_event_detect(IN7, GPIO.RISING, callback=toggle_motor, bouncetime=200)
GPIO.add_event_detect(BUTTON_DIRECTION, GPIO.RISING, callback=change_direction, bouncetime=200)

def main():
    print("Press the button to start the motor.")
    try:
        while True:
            time.sleep(1)  # Wait for button press
    except KeyboardInterrupt:
        pass
    finally:
        pwm.stop()
        GPIO.cleanup()
# Command line execution
if __name__ == '__main__' :
    main()