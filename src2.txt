# !/usr/bin/env python3
# Generated by Proteus Visual Designer for Raspberry Pi

# Modules
from goto import with_goto
from stddef import *
import var
import pio
import resource
from datetime import datetime
import RPi.GPIO as GPIO
import time

class MotorController:
    def __init__(self, pwm_pin, in1_pin, in2_pin, in3_pin=None, in4_pin=None):
        self.pwm_pin = pwm_pin
        self.in1_pin = in1_pin
        self.in2_pin = in2_pin
        self.in3_pin = in3_pin
        self.in4_pin = in4_pin
        
        self.motor_direction = False  # True for one direction, False for the other

        GPIO.setup(self.pwm_pin, GPIO.OUT)
        GPIO.setup(self.in1_pin, GPIO.OUT)
        GPIO.setup(self.in2_pin, GPIO.OUT)
        if self.in3_pin is not None:
            GPIO.setup(self.in3_pin, GPIO.OUT)
        if self.in4_pin is not None:
            GPIO.setup(self.in4_pin, GPIO.OUT)

        self.pwm = GPIO.PWM(self.pwm_pin, 1000)
        self.pwm.start(0)

    def change_direction(self):
        self.motor_direction = not self.motor_direction
        direction = "Forward" if self.motor_direction else "Reverse"
        print(f"Motor direction changed to: {direction}")

    def move(self):
        if self.motor_direction:
            GPIO.output(self.in1_pin, GPIO.HIGH)
            GPIO.output(self.in2_pin, GPIO.LOW)
            if self.in3_pin is not None:
                GPIO.output(self.in3_pin, GPIO.HIGH)
            if self.in4_pin is not None:
                GPIO.output(self.in4_pin, GPIO.LOW)
        else:
            GPIO.output(self.in1_pin, GPIO.LOW)
            GPIO.output(self.in2_pin, GPIO.HIGH)
            if self.in3_pin is not None:
                GPIO.output(self.in3_pin, GPIO.LOW)
            if self.in4_pin is not None:
                GPIO.output(self.in4_pin, GPIO.HIGH)
                
        for speed in range(0, 101, 5):  # Increase speed from 0 to 100
            self.pwm.ChangeDutyCycle(speed)
            print(f"Motor Speed: {speed}%")
            time.sleep(0.1)

    def stop(self):
        self.pwm.stop()
        GPIO.cleanup()

class MotorSystem:
    def __init__(self):
        self.z_axis_motor = MotorController(26, 22, 23, 25, 24)
        self.y_axis_motor = MotorController(26, 27, 18)
        
        self.Z_DIRECTION_PIN = 17  # Start motors
        self.Y_DIRECTION_PIN = 4   # Start motors
        self.CHANGE_DIRECTION_PIN = 13  # Change direction

        GPIO.setup(self.Z_DIRECTION_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.setup(self.Y_DIRECTION_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.setup(self.CHANGE_DIRECTION_PIN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

        GPIO.add_event_detect(self.Z_DIRECTION_PIN, GPIO.RISING, callback=self.z_axis_motion, bouncetime=200)
        GPIO.add_event_detect(self.Y_DIRECTION_PIN, GPIO.RISING, callback=self.y_axis_motion, bouncetime=200)
        GPIO.add_event_detect(self.CHANGE_DIRECTION_PIN, GPIO.RISING, callback=self.change_direction, bouncetime=200)

    def z_axis_motion(self):
        if GPIO.input(self.Z_DIRECTION_PIN) == GPIO.HIGH:
            self.z_axis_motor.move()
        else:
            self.z_axis_motor.stop()

    def y_axis_motion(self):
        if GPIO.input(self.Y_DIRECTION_PIN) == GPIO.HIGH:
            self.y_axis_motor.move()
        else:
            self.y_axis_motor.stop()

    def change_direction(self):
        self.z_axis_motor.change_direction()
        self.y_axis_motor.change_direction()

def main():
    print("Press the button to start the motor.")
    motor_system = MotorSystem()
    try:
        while True:
            time.sleep(1)  # Wait for button press
    except KeyboardInterrupt:
        pass
    finally:
        motor_system.z_axis_motor.stop()
        motor_system.y_axis_motor.stop()

if __name__ == '__main__':
    GPIO.setmode(GPIO.BCM)
    main()
