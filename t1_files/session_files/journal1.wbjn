# encoding: utf-8
# 2024 R1
SetScriptVersion(Version="24.1.144")
template1 = GetTemplate(
    TemplateName="Static Structural",
    Solver="ANSYS")
system1 = template1.CreateSystem()
system1.DisplayText = "Study 2 - Static Stress - Load Case1"
geometry1 = system1.GetContainer(ComponentName="Geometry")
geometry1.SetFile(FilePath="C:/Users/Hp/AppData/Local/Temp/PhysicsTransfer/ansys.pmdb")
engineeringData1 = system1.GetContainer(ComponentName="Engineering Data")
material1 = engineeringData1.GetMaterial(Name="Structural Steel")
material1.Delete()
matl1 = engineeringData1.CreateMaterial(Name="Aluminum")
matlProp1 = matl1.CreateProperty(
    Name="Density",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp1.SetData(
    Index=-1,
    Variables=["Density"],
    Values=[["2700 [kg m^-3]"]])
matlProp2 = matl1.CreateProperty(
    Name="Elasticity",
    Behavior="Isotropic",
    Qualifiers={"Definition": "", "Behavior": "Isotropic"})
matlProp2.SetData(
    Index=-1,
    Variables=["Young's Modulus"],
    Values=[["68900000000 [Pa]"]])
matlProp2.SetData(
    Variables=["Poisson's Ratio"],
    Values=[["0.33"]])
matlProp3 = matl1.CreateProperty(
    Name="Thermal Conductivity",
    Behavior="Isotropic",
    Qualifiers={"Definition": "", "Behavior": "Isotropic"})
matlProp3.SetData(
    Index=-1,
    Variables=["Thermal Conductivity"],
    Values=[["230 [W m^-1 K^-1]"]])
matlProp4 = matl1.CreateProperty(
    Name="Specific Heat",
    Definition="Constant Pressure",
    Qualifiers={"Definition": "Constant Pressure", "Behavior": ""})
matlProp4.SetData(
    Index=-1,
    Variables=["Specific Heat"],
    Values=[["897 [J kg^-1 K^-1]"]])
matlProp5 = matl1.CreateProperty(
    Name="Tensile Ultimate Strength",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp5.SetData(
    Index=-1,
    Variables=["Tensile Ultimate Strength"],
    Values=[["310000000 [Pa]"]])
matlProp6 = matl1.CreateProperty(
    Name="Tensile Yield Strength",
    Qualifiers={"Definition": "", "Behavior": ""})
matlProp6.SetData(
    Index=-1,
    Variables=["Tensile Yield Strength"],
    Values=[["275000000 [Pa]"]])
matlProp7 = matl1.CreateProperty(
    Name="Coefficient of Thermal Expansion",
    Definition="Secant",
    Behavior="Isotropic",
    Qualifiers={"Definition": "Secant", "Behavior": "Isotropic"})
matlProp7.SetData(
    SheetName="Coefficient of Thermal Expansion",
    SheetQualifiers={"Definition": "Secant", "Behavior": "Isotropic"},
    Index=-1,
    Variables=["Coefficient of Thermal Expansion"],
    Values=[["2.36E-05 [K^-1]"]])
modelComponent1 = system1.GetComponent(Name="Model")
modelComponent1.Refresh()
model1 = system1.GetContainer(ComponentName="Model")
model1.Edit()
model1.SendCommand(
    Command="""
# -*- coding: utf-8 -*-
from System.Collections.Generic import IEnumerable, List
import System
import ui_handlers
from functools import cmp_to_key

def SuppressOtherGeoBodies(geoBodyIds):
	geometry = Model.Geometry
	geoData = ExtAPI.DataModel.GeoData
	studyBodyIds = list()
	for geoBodyId in geoBodyIds:
		body = geometry.GetBody(geoData.GeoEntityById(geoBodyId))
		if body == None: continue
		studyBodyIds.Add(body.ObjectId)
	bodies = [obj for obj in geometry.GetChildren(DataModelObjectCategory.Body, True) if obj.ObjectState != ObjectState.Suppressed]
	for body in bodies:
		if body.ObjectId in studyBodyIds: continue
		body.Suppressed = True

def MakeGeoBodiesRigid(geoBodyIds):
	geometry = Model.Geometry
	geoData = ExtAPI.DataModel.GeoData
	for geoBodyId in geoBodyIds:
		body = geometry.GetBody(geoData.GeoEntityById(geoBodyId))
		if body == None: continue
		body.StiffnessBehavior = StiffnessBehavior.Rigid

def AssignMaterialByIds(bodyIds, matname):
	if bodyIds.Count < 1: return
	for body in Model.GetChildren(DataModelObjectCategory.Body, True):
		geoBody = body.GetGeoBody()
		if geoBody.Id in bodyIds: body.Material = matname

def AssignMaterialByNS(nsname, matname):
	bodyIds = []
	for ns in Model.GetChildren(DataModelObjectCategory.NamedSelection, True):
		if ns.Name == nsname:
			bodyIds.extend(ns.Location.Ids)
	if bodyIds.Count < 1: return
	for body in Model.GetChildren(DataModelObjectCategory.Body, True):
		geoBody = body.GetGeoBody()
		if geoBody.Id in bodyIds: body.Material = matname

def GetNamedSelectionByName(name):
	for ns in Model.GetChildren(DataModelObjectCategory.NamedSelection, True):
		if ns.Name == name: return ns
	return None

def DeleteConnectionGroups():
	if Model.Connections:
		connectionGroupIds = [group.ObjectId for group in Model.Connections.GetChildren(DataModelObjectCategory.ConnectionGroup, False)]
		for connectionGroupId in connectionGroupIds:
			obj = DataModel.GetObjectById(connectionGroupId)
			if obj: obj.Delete()
	else:
		Model.AddConnections()

def SetContactGroup():
	if Model.Connections == None: Model.AddConnections()
	contactGroups = [group for group in Model.GetChildren(DataModelObjectCategory.ConnectionGroup, True) if group.ConnectionType == AutoDetectionType.Contact]
	if contactGroups.Count < 1:
		contactGroup = Model.Connections.AddConnectionGroup()
		contactGroup.ConnectionType = AutoDetectionType.Contact
		return contactGroup

def GetContactGroup():
	contactGroups = [group for group in Model.GetChildren(DataModelObjectCategory.ConnectionGroup, True) if group.ConnectionType == AutoDetectionType.Contact]
	if contactGroups.Count > 0: return contactGroups[0]
	else:
		contactGroup = SetContactGroup()
		return contactGroup
	return None

def SetJointGroup():
	if Model.Connections == None: Model.AddConnections()
	jointGroups = [group for group in Model.GetChildren(DataModelObjectCategory.ConnectionGroup, True) if group.ConnectionType == AutoDetectionType.Joint]
	if jointGroups.Count < 1:
		jointGroup = Model.Connections.AddConnectionGroup()
		jointGroup.ConnectionType = AutoDetectionType.Joint
		jointGroup.AutomaticFixedJoints = False
		jointGroup.RevoluteJoints = False
		return jointGroup

def GetJointGroup():
	jointGroups = [group for group in Model.GetChildren(DataModelObjectCategory.ConnectionGroup, True) if group.ConnectionType == AutoDetectionType.Joint]
	if jointGroups.Count > 0: return jointGroups[0]
	else:
		jointGroup = SetJointGroup()
		return jointGroup
	return None

def SetField(analysis, prop, val, unit):
	if analysis.AnalysisType in [AnalysisType.Static, AnalysisType.Transient]:
		inputs = []
		outputs = []
		for i in range(1, analysis.AnalysisSettings.NumberOfSteps+1):
			endTime = analysis.AnalysisSettings.GetStepEndTime(i)
			inputs.Add(Quantity(\"{0} [s]\".format(endTime.Value.ToString(System.Globalization.CultureInfo.InvariantCulture))))
			if i == analysis.AnalysisSettings.NumberOfSteps:
				outputs.Add(Quantity(\"{0} [{1}]\".format(val.ToString(System.Globalization.CultureInfo.InvariantCulture), unit)))
			else:
				outputs.Add(Quantity(\"0.0 [{0}]\".format(unit)))
		prop.Inputs[0].DiscreteValues = inputs
		prop.Output.DiscreteValues = outputs

	elif analysis.AnalysisType in [AnalysisType.Harmonic, AnalysisType.Spectrum, AnalysisType.ResponseSpectrum]:
		prop.Inputs[0].DiscreteValues = [Quantity(\"{0} [Hz]\".format(1.0))]
		prop.Output.DiscreteValues = [Quantity(\"{0} [{1}]\".format(val.ToString(System.Globalization.CultureInfo.InvariantCulture), unit))]

def GetSelectionArea(object):
	import units
	cadUnit = ExtAPI.DataModel.GeoData.Assemblies[0].Unit
	area = 0
	for id in bc.Location.Ids: area += ExtAPI.DataModel.GeoData.GeoEntityById(id).Area
	area = units.ConvertUnit(area, cadUnit, \"m\")
	return area

def FlipInvalidContacts():
	contacts = [contact for contact in Model.GetChildren(DataModelObjectCategory.ContactRegion, True) if not contact.Suppressed]
	for contact in contacts:
		if contact.InternalObject.State == 2:
			contact.FlipContactTarget()

def SetPickFilter(selection):
	ds = DataModel.InternalObject[\"ds\"]
	sm = ds.SelectionManager()
	geoType = DataModel.GeoData.GeoEntityById(selection.Ids[0]).Type
	if geoType == GeoCellTypeEnum.GeoBody:
		sm.PickFilterAuto = 1
	elif geoType == GeoCellTypeEnum.GeoFace:
		sm.PickFilterAuto = 2
	elif geoType == GeoCellTypeEnum.GeoEdge:
		sm.PickFilterAuto = 4
	elif geoType == GeoCellTypeEnum.GeoVertex:
		sm.PickFilterAuto = 8

def DeleteDefaultConnections():
	if Model.Connections:
		contacts = [contact for contact in Model.GetChildren(DataModelObjectCategory.ContactRegion, True)]
		with Transaction():
			for obj in contacts:
				if obj.ScopeMode == AutomaticOrManual.Automatic: obj.Delete()
	else:
		Model.AddConnections()

def datamodel_cmp(a,b):
	if a.DataModelObjectCategory == DataModelObjectCategory.CoordinateSystem:
		if b.DataModelObjectCategory != DataModelObjectCategory.CoordinateSystem:
			return 1
	else:
		return -1

datamodel_key = cmp_to_key(datamodel_cmp)

def GetDiscoveryObjects():
	objects = [child for child in Model.GetChildren(DataModelObjectCategory.DataModelObject,True) if hasattr(child, 'ImportableObjectSourceId') and child.ImportableObjectSourceId == \"Discovery\" and child.DataModelObjectCategory != DataModelObjectCategory.Analysis and child.DataModelObjectCategory != DataModelObjectCategory.Mesh]
	objects.sort(key=datamodel_key)
	return objects

kept_analyses = []
last_analysis = None

DeleteConnectionGroups()
ExtAPI.Application.ActiveUnitSystem = MechanicalUnitSystem.StandardMKS
ExtAPI.Application.ActiveAngularVelocityUnit = AngularVelocityUnitType.RadianPerSecond

is_beta_on = ExtAPI.Application.ScriptByName(\"jscript\").CallJScript(\"DSIsBetaOptionsEnabled\")

with Transaction():
	ExtAPI.Log.WriteMessage(\"Start Model Transfer\")
	try:
		AssignMaterialByIds([349], 'Aluminum')
	except:
		message = Ansys.Mechanical.Application.Message('Aluminum' + \" material couldn't be assigned.\", MessageSeverityType.Warning)
		message.Source = Model
		ExtAPI.Application.Messages.Add(message)
		pass

	mapOfImportedObjects = GetDiscoveryObjects()
	analysis = Model.Analyses[0]
	analysis.Name = \"Study 2 - Static Stress - Load Case1\"

	analysis.EnvironmentTemperature = Quantity(\"295.15 [K]\")
	analysis.ImportableObjectSourceId = \"Discovery\"
	try:
		objects = analysis.GetChildren(DataModelObjectCategory.FixedSupport, True)
		bcs = [bcs for bcs in objects if bcs.TransferableObjectId == \"b136b780-53a1-4e2f-9083-1d493e925d04\"]
		if bcs.Count != 0:
			mapOfImportedObjects = [object for object in mapOfImportedObjects if object.TransferableObjectId != \"b136b780-53a1-4e2f-9083-1d493e925d04\"]
			bc = bcs[0]
		else:
			bc = analysis.AddFixedSupport()
			bc.ImportableObjectSourceId = \"Discovery\"
			bc.TransferableObjectId = \"b136b780-53a1-4e2f-9083-1d493e925d04\"
		if bc.ReadOnly and analysis.ReadOnly:
			bc.ReadOnly = False
			bc.Name = \"Fixed3\"
			bc2 = bc
			selection = ExtAPI.SelectionManager.CreateSelectionInfo(SelectionTypeEnum.GeometryEntities)
			selection.Ids = [366,373,374,371,375,361,358,363,364,367,354,356,368,369,372,357,370,359,365,352,355,362,353,351,360]
			SetPickFilter(selection)
			bc.Location = selection
		bc.ImportableObjectSourceId = \"\"
		bc.ReadOnly = False
		pass
	except:
		message = Ansys.Mechanical.Application.Message('Fixed3' + \" object couldn't be created.\", MessageSeverityType.Warning)
		message.Source = analysis
		ExtAPI.Application.Messages.Add(message)
		pass

	try:
		objects = analysis.GetChildren(DataModelObjectCategory.Acceleration, True)
		bcs = [bcs for bcs in objects if bcs.TransferableObjectId == \"b22d3218-62ad-4df3-ad46-592481c1d946\"]
		if bcs.Count != 0:
			mapOfImportedObjects = [object for object in mapOfImportedObjects if object.TransferableObjectId != \"b22d3218-62ad-4df3-ad46-592481c1d946\"]
			bc = bcs[0]
		else:
			bc = analysis.AddAcceleration()
			bc.ImportableObjectSourceId = \"Discovery\"
			bc.TransferableObjectId = \"b22d3218-62ad-4df3-ad46-592481c1d946\"
		if bc.ReadOnly and analysis.ReadOnly:
			bc.ReadOnly = False
			bc.Name = \"Gravity\"
			bc.DefineBy=LoadDefineBy.Components
			SetField(analysis, bc.XComponent, 0, \"m sec^-1 sec^-1\")
			SetField(analysis, bc.YComponent, 0, \"m sec^-1 sec^-1\")
			SetField(analysis, bc.ZComponent, 9.80665, \"m sec^-1 sec^-1\")
		bc.ImportableObjectSourceId = \"\"
		bc.ReadOnly = False
		pass
	except:
		message = Ansys.Mechanical.Application.Message('Gravity' + \" object couldn't be created.\", MessageSeverityType.Warning)
		message.Source = analysis
		ExtAPI.Application.Messages.Add(message)
		pass

	try:
		objects = analysis.GetChildren(DataModelObjectCategory.Force, True)
		bcs = [bcs for bcs in objects if bcs.TransferableObjectId == \"7a5afb09-56c8-4389-9b6a-6dc88efbeb41\"]
		if bcs.Count != 0:
			mapOfImportedObjects = [object for object in mapOfImportedObjects if object.TransferableObjectId != \"7a5afb09-56c8-4389-9b6a-6dc88efbeb41\"]
			bc = bcs[0]
		else:
			bc = analysis.AddForce()
			bc.ImportableObjectSourceId = \"Discovery\"
			bc.TransferableObjectId = \"7a5afb09-56c8-4389-9b6a-6dc88efbeb41\"
		if bc.ReadOnly and analysis.ReadOnly:
			bc.ReadOnly = False
			bc.Name = \"Force4\"
			bc4 = bc
			selection = ExtAPI.SelectionManager.CreateSelectionInfo(SelectionTypeEnum.GeometryEntities)
			selection.Ids = [350]
			SetPickFilter(selection)
			bc.Location = selection
			bc.DefineBy=LoadDefineBy.Components
			SetField(analysis, bc.XComponent, 0, \"N\")
			SetField(analysis, bc.YComponent, 0, \"N\")
			SetField(analysis, bc.ZComponent, -505215, \"N\")
		bc.ImportableObjectSourceId = \"\"
		bc.ReadOnly = False
		pass
	except:
		message = Ansys.Mechanical.Application.Message('Force4' + \" object couldn't be created.\", MessageSeverityType.Warning)
		message.Source = analysis
		ExtAPI.Application.Messages.Add(message)
		pass

	analysis.ImportableObjectSourceId = \"\"
	analysis.ReadOnly = False
	if len(mapOfImportedObjects):
		for object in mapOfImportedObjects:
			object.ReadOnly = False
			object.Delete()
	if analysis.Solution.GetChildren(DataModelObjectCategory.DataModelObject, True).Count == 1:
		analysis.Solution.AddTotalDeformation()

	try:
		ui_handlers.AnalyticsAction(\"ExternalStudyImporter.Fusion.Ansys.Contracts.StaticStructuralData\")
	except:
		pass

FlipInvalidContacts()
Graphics.Camera.SetFit()
Graphics.ViewOptions.RescaleAnnotations()
Graphics.Redraw()
""",
    Language="Python")
system2 = GetSystem(Name="SYS 1")
setup1 = system2.GetContainer(ComponentName="Setup")
setup1.Edit()
Save(Overwrite=True)
